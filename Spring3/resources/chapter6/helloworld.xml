<?xml version="1.0" encoding="UTF-8"?>  
<beans  xmlns="http://www.springframework.org/schema/beans"  
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
        xmlns:aop="http://www.springframework.org/schema/aop"  
        xsi:schemaLocation="  
           http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
           http://www.springframework.org/schema/aop  
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">  
  

<bean id="helloWorldService" class="com.ligh.spring3.chapter6.service.impl.HelloWorldServiceImpl"/>
	
<bean id="aspect" class="com.ligh.spring3.chapter6.aop.HelloWorldAspect"/>
<!-- 切入点使用<aop:config>标签下的<aop:pointcut>配置，expression属性用于定义切入点模式，
默认是AspectJ语法，“execution(* com.ligh.spring3..*.*(..))”表示匹配cn.javass包及子包下的任何方法执行。
切面使用<aop:config>标签下的<aop:aspect>标签配置，其中“ref”用来引用切面支持类的方法。
前置通知使用<aop:aspect>标签下的<aop:before>标签来定义，pointcut-ref属性用于引用切入点Bean，
而method用来引用切面通知实现类中的方法，该方法就是通知实现，即在目标类方法执行之前调用的方法。
最终通知使用<aop:aspect>标签下的<aop:after >标签来定义，切入点除了使用pointcut-ref属性来引用已经存在的切入点，
也可以使用pointcut属性来定义，如pointcut="execution(* com.ligh.spring3..*.*(..))"，method属性同样是指定通知实现，即在目标类方法执行之后调用的方法。 -->
<aop:config>
	<aop:pointcut id="pointcut" expression="execution(* com.ligh.spring3..*.*(..))"/>
		<aop:aspect ref="aspect">
			<aop:before pointcut-ref="pointcut" method="beforeAdvice"/>
			<aop:after pointcut="execution(* com.ligh.spring3..*.*(..))" method="afterFinallyAdvice"/>
		</aop:aspect>
</aop:config>

</beans>
